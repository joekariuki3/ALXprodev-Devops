#!/usr/bin/bash

# Configuration constants
readonly API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
readonly OUTPUT_DIR="pokemon_data"
readonly API_HEADER="Accept: application/json"
readonly MAX_RETRIES=3
readonly RETRY_DELAY=2
readonly ERROR_LOG="pokemon_errors.log"
readonly MAX_PARALLEL_JOBS=3

# List of Pokemon to fetch
readonly POKEMON_LIST=(
    "bulbasaur"
    "ivysaur"
    "venusaur"
    "charmander"
    "charmeleon"
)

# Function to log errors
log_error() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[${timestamp}] $1" >> "$ERROR_LOG"
    echo "ERROR: $1" >&2
}

# Function to count active jobs
count_jobs() {
    jobs -p | wc -l
}

terminate_job() {
    local job_pid="$1"
    if [ -n "$job_pid" ]; then
        if jobs -p | grep -q "$job_pid"; then
            kill "$job_pid" 2>/dev/null || true
            wait "$job_pid" 2>/dev/null || true
        fi
    fi
}


# Function to validate Pokemon name
validate_pokemon_name() {
    local pokemon_name="$1"
    if [[ ! "$pokemon_name" =~ ^[a-zA-Z0-9-]+$ ]]; then
        return 1
    fi
    return 0
}

# Function to fetch a single Pokemon's data
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="$API_BASE_URL/${pokemon_name}"
    local retry_count=0
    local status_file="${OUTPUT_DIR}/.${pokemon_name}.status"

    # Validate Pokemon name
    if ! validate_pokemon_name "$pokemon_name"; then
        log_error "Invalid Pokemon name format: ${pokemon_name}"
        echo "failed" > "$status_file"
        return 1
    fi

    echo "Fetching data for ${pokemon_name}..."
    while [ $retry_count -lt $MAX_RETRIES ]; do
        if curl -X GET "$api_url" \
            -H "$API_HEADER" \
            -o "$output_file" \
            --fail \
            --silent \
            --show-error \
            --connect-timeout 10 \
            --max-time 30 2>/dev/null; then

            if [ -s "$output_file" ]; then
                echo "success" > "$status_file"
                echo "Successfully fetched ${pokemon_name}"
                return 0
            else
                rm -f "$output_file"
            fi
        fi

        retry_count=$((retry_count + 1))

        if [ $retry_count -lt $MAX_RETRIES ]; then
            sleep $RETRY_DELAY
        fi
    done

    echo "failed" > "$status_file"
    log_error "Failed to fetch ${pokemon_name} after ${MAX_RETRIES} attempts"
    return 1
}

# Function to process all Pokemon in parallel
process_pokemon_parallel() {
    mkdir -p "$OUTPUT_DIR"
    echo "=== Pokemon API Error Log ($(date '+%Y-%m-%d %H:%M:%S')) ===" > "$ERROR_LOG"

    local completed=0
    local success_count=0
    local fail_count=0

    trap 'for pid in $(jobs -p); do terminate_job "$pid"; done' EXIT

    echo "Starting parallel Pokemon data fetching..."

    # Process Pokemon in parallel with job control
    for pokemon in "${POKEMON_LIST[@]}"; do
        # Wait if we've reached max parallel jobs
        while [ "$(count_jobs)" -ge "$MAX_PARALLEL_JOBS" ]; do
            wait -n
        done

        # Start new job
        fetch_pokemon_data "$pokemon" &
        echo "Started job for ${pokemon}"
    done

    # Wait for all remaining jobs to complete
    echo "Waiting for remaining jobs to complete..."
    wait

    # Check results
    for pokemon in "${POKEMON_LIST[@]}"; do
        local status_file="${OUTPUT_DIR}/.${pokemon}.status"
        if [ -f "$status_file" ]; then
            if [ "$(cat "$status_file")" = "success" ]; then
                echo "✓ ${pokemon}: Success"
                ((success_count++))
            else
                echo "✗ ${pokemon}: Failed"
                ((fail_count++))
            fi
            rm -f "$status_file"
        else
            echo "? ${pokemon}: Status unknown"
            ((fail_count++))
        fi
    done

    echo
    echo "Summary:"
    echo "--------"
    echo "Total Pokemon processed: ${#POKEMON_LIST[@]}"
    echo "Successful: ${success_count}"
    echo "Failed: ${fail_count}"
}

# Main execution
process_pokemon_parallel

# Display final message
echo
echo "Processing complete. Check $ERROR_LOG for any errors."